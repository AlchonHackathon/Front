{"ast":null,"code":"var _jsxFileName = \"/Users/fawwazhaziq/Downloads/SEProject-v3/SEProject/frontend/src/components/UserTransfer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styling/UserTransfer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserTransfer = () => {\n  _s();\n  const [sender, setSender] = useState('');\n  const [receiver, setReceiver] = useState('');\n  const [amount, setAmount] = useState('');\n  const [message, setMessage] = useState('');\n  const [receiverOptions, setReceiverOptions] = useState([]);\n  const API_URL = 'https://service-testnet.maschain.com';\n  const CLIENT_ID = 'dcc67b1d4f9c7db2483e7823e14a4bfb28ee87e96abb857e57febbcba16836db';\n  const CLIENT_SECRET = 'sk_07bdb646220d6ca9081ab8bead4ea41e2c1f0fb0a7ea2d992faa9f119e5a25ba';\n\n  /**\n     * \n     * azrai test wallet id - 0x378ec8591F721Bc7B2bCEa3DD2bF9A11E68E4752\n     * \n     * API_URL/api/wallet/wallet/{wallet adress sender} - get name\n     * \n     * receiver wallet id - input\n     * \n     * API_URL/api/wallet/wallet/{wallet adress receiver} - get name\n    \n       */\n\n  useEffect(() => {\n    // Fetch sender address when the component mounts\n    const fetchSenderAddress = async () => {\n      try {\n        // Replace this with the actual API endpoint to get the sender's address\n        const response = await axios.get(`${API_URL}/api/wallet/wallet/0x378ec8591F721Bc7B2bCEa3DD2bF9A11E68E4752`, {\n          headers: {\n            'client_id': CLIENT_ID,\n            'client_secret': CLIENT_SECRET\n          }\n        });\n        setSender(response.data.result.name); // Assuming the response contains the address\n        console.log(response);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error fetching sender address:', error);\n        setMessage('Failed to retrieve sender address: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n    };\n    fetchSenderAddress();\n  }, []);\n  useEffect(() => {\n    // Fetch sender address when the component mounts\n    const fetchReceiver = async () => {\n      try {\n        // Replace this with the actual API endpoint to get the sender's address\n        const response = await axios.get(`${API_URL}/api/wallet/wallet/`, {\n          headers: {\n            'client_id': CLIENT_ID,\n            'client_secret': CLIENT_SECRET\n          }\n        });\n        setReceiverOptions(response.data.addresses); // Assuming response contains an array of addresses\n        if (response.data.addresses.length > 0) {\n          setReceiver(response.data.addresses[0]); // Set the default receiver address if needed\n        }\n        setReceiver(response); // Assuming the response contains the address\n        console.log(response);\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        console.error('Error fetching retriever:', error);\n        setMessage('Failed to retrieve retriever: ' + (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message));\n      }\n    };\n    fetchReceiver();\n  }, []);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Perform the transfer\n      const response = await axios.post(`${API_URL}/api/maschain/transfer`, {\n        sender,\n        receiver,\n        amount\n      }, {\n        headers: {\n          'Authorization': `Bearer ${CLIENT_SECRET}`\n        }\n      });\n      setMessage(response.data.message);\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error transferring tokens:', error);\n      setMessage('Failed to transfer tokens: ' + (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"token-transfer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transfer Tokens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sender\",\n        children: \"Sender Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"sender\",\n        value: sender,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"receiver\",\n        children: \"Receiver Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"receiver\",\n        value: receiver,\n        onChange: e => setReceiver(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Receiver Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), receiverOptions.map((address, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: address,\n          children: address\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"amount\",\n        children: \"Amount:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Transfer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(UserTransfer, \"Owlm3ahtftzX8JZi0O2PKRXhJiM=\");\n_c = UserTransfer;\nexport default UserTransfer;\nvar _c;\n$RefreshReg$(_c, \"UserTransfer\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","UserTransfer","_s","sender","setSender","receiver","setReceiver","amount","setAmount","message","setMessage","receiverOptions","setReceiverOptions","API_URL","CLIENT_ID","CLIENT_SECRET","fetchSenderAddress","response","get","headers","data","result","name","console","log","error","_error$response","_error$response$data","fetchReceiver","addresses","length","_error$response2","_error$response2$data","handleSubmit","e","preventDefault","post","_error$response3","_error$response3$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","readOnly","onChange","target","map","address","index","required","_c","$RefreshReg$"],"sources":["/Users/fawwazhaziq/Downloads/SEProject-v3/SEProject/frontend/src/components/UserTransfer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styling/UserTransfer.css';\n\nconst UserTransfer = () => {\n  const [sender, setSender] = useState('');\n  const [receiver, setReceiver] = useState('');\n  const [amount, setAmount] = useState('');\n  const [message, setMessage] = useState('');\n  const [receiverOptions, setReceiverOptions] = useState([]);\n\n  const API_URL = 'https://service-testnet.maschain.com';\n  const CLIENT_ID = 'dcc67b1d4f9c7db2483e7823e14a4bfb28ee87e96abb857e57febbcba16836db';\n  const CLIENT_SECRET = 'sk_07bdb646220d6ca9081ab8bead4ea41e2c1f0fb0a7ea2d992faa9f119e5a25ba';\n\n  /**\n     * \n     * azrai test wallet id - 0x378ec8591F721Bc7B2bCEa3DD2bF9A11E68E4752\n     * \n     * API_URL/api/wallet/wallet/{wallet adress sender} - get name\n     * \n     * receiver wallet id - input\n     * \n     * API_URL/api/wallet/wallet/{wallet adress receiver} - get name\n    \n       */\n      \n  useEffect(() => {\n    // Fetch sender address when the component mounts\n    const fetchSenderAddress = async () => {\n      try {\n        // Replace this with the actual API endpoint to get the sender's address\n        const response = await axios.get(`${API_URL}/api/wallet/wallet/0x378ec8591F721Bc7B2bCEa3DD2bF9A11E68E4752`, {\n          headers: {\n                        'client_id': CLIENT_ID,\n            'client_secret': CLIENT_SECRET\n          }\n        });\n        setSender(response.data.result.name); // Assuming the response contains the address\n        console.log(response)\n      } catch (error) {\n        console.error('Error fetching sender address:', error);\n        setMessage('Failed to retrieve sender address: ' + (error.response?.data?.message || error.message));\n      }\n    };\n\n    fetchSenderAddress();\n  }, []);\n\n  useEffect(() => {\n    // Fetch sender address when the component mounts\n    const fetchReceiver = async () => {\n      try {\n        // Replace this with the actual API endpoint to get the sender's address\n        const response = await axios.get(`${API_URL}/api/wallet/wallet/`, {\n          headers: {\n                        'client_id': CLIENT_ID,\n            'client_secret': CLIENT_SECRET\n          }\n        });\n        setReceiverOptions(response.data.addresses); // Assuming response contains an array of addresses\n        if (response.data.addresses.length > 0) {\n          setReceiver(response.data.addresses[0]); // Set the default receiver address if needed\n        }\n        setReceiver(response); // Assuming the response contains the address\n        console.log(response)\n      } catch (error) {\n        console.error('Error fetching retriever:', error);\n        setMessage('Failed to retrieve retriever: ' + (error.response?.data?.message || error.message));\n      }\n    };\n\n    fetchReceiver();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      // Perform the transfer\n      const response = await axios.post(`${API_URL}/api/maschain/transfer`, {\n        sender,\n        receiver,\n        amount,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${CLIENT_SECRET}`\n        }\n      });\n      setMessage(response.data.message);\n    } catch (error) {\n      console.error('Error transferring tokens:', error);\n      setMessage('Failed to transfer tokens: ' + (error.response?.data?.message || error.message));\n    }\n  };\n\n  return (\n    <div className=\"token-transfer-container\">\n      <h1>Transfer Tokens</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"sender\">Sender Address:</label>\n        <input\n          type=\"text\"\n          id=\"sender\"\n          value={sender}\n          readOnly\n        />\n        <label htmlFor=\"receiver\">Receiver Address:</label>\n        <select\n          id=\"receiver\"\n          value={receiver}\n          onChange={(e) => setReceiver(e.target.value)}\n        >\n          <option value=\"\">Select Receiver Address</option>\n          {receiverOptions.map((address, index) => (\n            <option key={index} value={address}>{address}</option>\n          ))}\n        </select>\n        \n        <label htmlFor=\"amount\">Amount:</label>\n        <input\n          type=\"number\"\n          id=\"amount\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Transfer</button>\n      </form>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default UserTransfer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMiB,OAAO,GAAG,sCAAsC;EACtD,MAAMC,SAAS,GAAG,kEAAkE;EACpF,MAAMC,aAAa,GAAG,qEAAqE;;EAE3F;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEElB,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAE,GAAEL,OAAQ,+DAA8D,EAAE;UAC1GM,OAAO,EAAE;YACK,WAAW,EAAEL,SAAS;YAClC,eAAe,EAAEC;UACnB;QACF,CAAC,CAAC;QACFX,SAAS,CAACa,QAAQ,CAACG,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;QACtCC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MACvB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QAAA,IAAAC,eAAA,EAAAC,oBAAA;QACdJ,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDf,UAAU,CAAC,qCAAqC,IAAI,EAAAgB,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBN,IAAI,cAAAO,oBAAA,uBAApBA,oBAAA,CAAsBlB,OAAO,KAAIgB,KAAK,CAAChB,OAAO,CAAC,CAAC;MACtG;IACF,CAAC;IAEDO,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,MAAM;IACd;IACA,MAAM+B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAMX,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAE,GAAEL,OAAQ,qBAAoB,EAAE;UAChEM,OAAO,EAAE;YACK,WAAW,EAAEL,SAAS;YAClC,eAAe,EAAEC;UACnB;QACF,CAAC,CAAC;QACFH,kBAAkB,CAACK,QAAQ,CAACG,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC;QAC7C,IAAIZ,QAAQ,CAACG,IAAI,CAACS,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;UACtCxB,WAAW,CAACW,QAAQ,CAACG,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C;QACAvB,WAAW,CAACW,QAAQ,CAAC,CAAC,CAAC;QACvBM,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MACvB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QAAA,IAAAM,gBAAA,EAAAC,qBAAA;QACdT,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDf,UAAU,CAAC,gCAAgC,IAAI,EAAAqB,gBAAA,GAAAN,KAAK,CAACR,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,uBAApBA,qBAAA,CAAsBvB,OAAO,KAAIgB,KAAK,CAAChB,OAAO,CAAC,CAAC;MACjG;IACF,CAAC;IAEDmB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF;MACA,MAAMlB,QAAQ,GAAG,MAAMnB,KAAK,CAACsC,IAAI,CAAE,GAAEvB,OAAQ,wBAAuB,EAAE;QACpEV,MAAM;QACNE,QAAQ;QACRE;MACF,CAAC,EAAE;QACDY,OAAO,EAAE;UACP,eAAe,EAAG,UAASJ,aAAc;QAC3C;MACF,CAAC,CAAC;MACFL,UAAU,CAACO,QAAQ,CAACG,IAAI,CAACX,OAAO,CAAC;IACnC,CAAC,CAAC,OAAOgB,KAAK,EAAE;MAAA,IAAAY,gBAAA,EAAAC,qBAAA;MACdf,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDf,UAAU,CAAC,6BAA6B,IAAI,EAAA2B,gBAAA,GAAAZ,KAAK,CAACR,QAAQ,cAAAoB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBjB,IAAI,cAAAkB,qBAAA,uBAApBA,qBAAA,CAAsB7B,OAAO,KAAIgB,KAAK,CAAChB,OAAO,CAAC,CAAC;IAC9F;EACF,CAAC;EAED,oBACET,OAAA;IAAKuC,SAAS,EAAC,0BAA0B;IAAAC,QAAA,gBACvCxC,OAAA;MAAAwC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB5C,OAAA;MAAM6C,QAAQ,EAAEZ,YAAa;MAAAO,QAAA,gBAC3BxC,OAAA;QAAO8C,OAAO,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC/C5C,OAAA;QACE+C,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,QAAQ;QACXC,KAAK,EAAE9C,MAAO;QACd+C,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF5C,OAAA;QAAO8C,OAAO,EAAC,UAAU;QAAAN,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnD5C,OAAA;QACEgD,EAAE,EAAC,UAAU;QACbC,KAAK,EAAE5C,QAAS;QAChB8C,QAAQ,EAAGjB,CAAC,IAAK5B,WAAW,CAAC4B,CAAC,CAACkB,MAAM,CAACH,KAAK,CAAE;QAAAT,QAAA,gBAE7CxC,OAAA;UAAQiD,KAAK,EAAC,EAAE;UAAAT,QAAA,EAAC;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAChDjC,eAAe,CAAC0C,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAClCvD,OAAA;UAAoBiD,KAAK,EAAEK,OAAQ;UAAAd,QAAA,EAAEc;QAAO,GAA/BC,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmC,CACtD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eAET5C,OAAA;QAAO8C,OAAO,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvC5C,OAAA;QACE+C,IAAI,EAAC,QAAQ;QACbC,EAAE,EAAC,QAAQ;QACXC,KAAK,EAAE1C,MAAO;QACd4C,QAAQ,EAAGjB,CAAC,IAAK1B,SAAS,CAAC0B,CAAC,CAACkB,MAAM,CAACH,KAAK,CAAE;QAC3CO,QAAQ;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF5C,OAAA;QAAQ+C,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,EACNnC,OAAO,iBAAIT,OAAA;MAAAwC,QAAA,EAAI/B;IAAO;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAAC1C,EAAA,CAhIID,YAAY;AAAAwD,EAAA,GAAZxD,YAAY;AAkIlB,eAAeA,YAAY;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}